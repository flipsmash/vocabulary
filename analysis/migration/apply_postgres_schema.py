#!/usr/bin/env python3
"""Create PostgreSQL tables in the vocab database using generated metadata."""

from __future__ import annotations

import json
import os
import sys
from pathlib import Path

import psycopg


PROJECT_ROOT = Path(__file__).resolve().parents[2]
if str(PROJECT_ROOT) not in sys.path:
    sys.path.insert(0, str(PROJECT_ROOT))


SCHEMA_JSON = Path("analysis/migration/schema_metadata.json")


def render_create_table(table: dict, schema: str) -> str:
    column_lines = []
    for column in table["columns"]:
        parts = [f'"{column["name"]}" {column["data_type"]}']
        if column["identity"]:
            parts.append("GENERATED BY DEFAULT AS IDENTITY")
        if not column["nullable"]:
            parts.append("NOT NULL")
        if column["default"]:
            parts.append(column["default"])
        column_lines.append(" ".join(parts))

    if table["primary_key"]:
        pk = ", ".join(f'"{col}"' for col in table["primary_key"])
        column_lines.append(f"PRIMARY KEY ({pk})")

    body = ",\n    ".join(column_lines)
    return f'CREATE TABLE "{schema}"."{table["name"]}" (\n    {body}\n);'


def main() -> None:
    metadata = json.loads(SCHEMA_JSON.read_text())

    # Ordered creation to keep deterministic output
    tables = [metadata[name] for name in sorted(metadata.keys())]

    schema = os.getenv("PGSCHEMA", "public")

    conn = psycopg.connect(
        host=os.getenv("PGHOST", "10.0.0.99"),
        port=int(os.getenv("PGPORT", "6543")),
        user=os.getenv("PGUSER", "postgres.your-tenant-id"),
        password=os.getenv("PGPASSWORD", "your-super-secret-and-long-postgres-password"),
        dbname=os.getenv("PGDATABASE", "vocab"),
        sslmode=os.getenv("PGSSLMODE", "disable"),
    )

    try:
        conn.autocommit = False
        cur = conn.cursor()

        cur.execute(f'CREATE SCHEMA IF NOT EXISTS "{schema}";')
        cur.execute(f'SET search_path TO "{schema}";')

        for table in tables:
            sql = render_create_table(table, schema)
            print(f"Creating table {schema}.{table['name']}...")
            cur.execute(sql)

        conn.commit()
        print("All tables created successfully.")
    except Exception:
        conn.rollback()
        raise
    finally:
        conn.close()


if __name__ == "__main__":
    main()
