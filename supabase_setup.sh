#!/bin/bash
# Supabase Docker Setup Script
# Run this in WSL2 Ubuntu after the system setup is complete

set -e

echo "=========================================="
echo "Setting up Supabase with Docker Compose"
echo "=========================================="

# Create Supabase directory
cd ~/supabase-setup

# Clone official Supabase repository
echo "Cloning Supabase repository..."
git clone --depth 1 https://github.com/supabase/supabase.git
cd supabase/docker

# Create custom .env file optimized for vocabulary database
echo "Creating optimized .env configuration..."
cp .env.example .env

# Generate secure passwords
POSTGRES_PASSWORD=$(openssl rand -base64 32)
JWT_SECRET=$(openssl rand -base64 64)
ANON_KEY=$(openssl rand -base64 32)
SERVICE_ROLE_KEY=$(openssl rand -base64 32)

# Update .env with optimized settings
cat > .env << EOF
############
# Secrets
############
POSTGRES_PASSWORD=$POSTGRES_PASSWORD
JWT_SECRET=$JWT_SECRET
ANON_KEY=$ANON_KEY
SERVICE_ROLE_KEY=$SERVICE_ROLE_KEY

############
# Database
############
POSTGRES_HOST=db
POSTGRES_DB=postgres
POSTGRES_PORT=5432
POSTGRES_USER=postgres

############
# API Proxy
############
KONG_HTTP_PORT=8000
KONG_HTTPS_PORT=8443

############
# API
############
API_EXTERNAL_URL=http://localhost:8000
SUPABASE_PUBLIC_URL=http://localhost:8000

############
# Dashboard
############
DASHBOARD_PORT=3000
DASHBOARD_USERNAME=supabase
DASHBOARD_PASSWORD=this_password_is_insecure_and_should_be_updated

############
# Database - Performance optimized for vocabulary data
############
POSTGRES_MAX_CONNECTIONS=200
POSTGRES_SHARED_BUFFERS=4GB
POSTGRES_EFFECTIVE_CACHE_SIZE=12GB
POSTGRES_WORK_MEM=256MB
POSTGRES_MAINTENANCE_WORK_MEM=2GB

############
# Auth
############
GOTRUE_EXTERNAL_EMAIL_ENABLED=true
GOTRUE_MAILER_AUTOCONFIRM=false
GOTRUE_SMTP_ADMIN_EMAIL=brian@localhost
GOTRUE_SMTP_HOST=localhost
GOTRUE_SMTP_PORT=587
GOTRUE_SMTP_USER=
GOTRUE_SMTP_PASS=
GOTRUE_SMTP_SENDER_NAME=Vocabulary App

############
# Storage
############
STORAGE_BACKEND=file
GLOBAL_S3_BUCKET=supabase-storage

############
# Functions
############
FUNCTIONS_VERIFY_JWT=false

############
# Logs
############
LOGFLARE_API_KEY=your-api-key
LOGFLARE_URL=https://api.logflare.app

############
# Analytics
############
LOGFLARE_API_KEY=your-api-key

EOF

# Create optimized PostgreSQL configuration
echo "Creating PostgreSQL performance configuration..."
cat > volumes/db/postgresql.conf << EOF
# PostgreSQL configuration optimized for vocabulary database
# Generated by Supabase setup script

# Connection Settings
max_connections = 200
shared_preload_libraries = 'pg_stat_statements'

# Memory Settings (for 16GB RAM system)
shared_buffers = 4GB                    # 25% of RAM
effective_cache_size = 12GB             # 75% of RAM
work_mem = 256MB                        # For similarity calculations
maintenance_work_mem = 2GB              # For index creation
huge_pages = try

# Parallelism (for 6-core system)
max_worker_processes = 6
max_parallel_workers_per_gather = 4
max_parallel_workers = 6
max_parallel_maintenance_workers = 2

# Storage Settings (SSD optimized)
random_page_cost = 1.1
effective_io_concurrency = 200
checkpoint_completion_target = 0.9
wal_buffers = 64MB
checkpoint_segments = 64

# Logging and Monitoring
log_statement = 'mod'
log_duration = on
log_min_duration_statement = 1000
log_checkpoints = on
log_connections = on
log_disconnections = on
log_lock_waits = on

# For large data loads (migration)
checkpoint_timeout = 15min
max_wal_size = 4GB
min_wal_size = 1GB

# Full text search optimization
default_text_search_config = 'pg_catalog.english'
EOF

# Create Docker Compose override for performance
echo "Creating Docker Compose performance overrides..."
cat > docker-compose.override.yml << EOF
version: '3.8'

services:
  db:
    environment:
      - POSTGRES_SHARED_BUFFERS=4GB
      - POSTGRES_EFFECTIVE_CACHE_SIZE=12GB
      - POSTGRES_WORK_MEM=256MB
      - POSTGRES_MAINTENANCE_WORK_MEM=2GB
    volumes:
      - ./volumes/db/postgresql.conf:/etc/postgresql/postgresql.conf
    command: >
      postgres 
      -c config_file=/etc/postgresql/postgresql.conf
      -c shared_preload_libraries=pg_stat_statements
    deploy:
      resources:
        limits:
          memory: 8G
        reservations:
          memory: 4G

  kong:
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 512M

  auth:
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M

  rest:
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M

  realtime:
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M

  storage:
    deploy:
      resources:
        limits:
          memory: 1G
        reservations:
          memory: 256M
EOF

# Create directories
mkdir -p volumes/db

echo "Starting Supabase services..."
docker compose up -d

echo "Waiting for services to start..."
sleep 30

# Check if services are running
echo "Checking service status..."
docker compose ps

# Display connection information
echo ""
echo "=========================================="
echo "🎉 Supabase Setup Complete!"
echo "=========================================="
echo ""
echo "📊 Supabase Studio:  http://localhost:3000"
echo "🔗 API URL:          http://localhost:8000"
echo "🐘 PostgreSQL:       localhost:5432"
echo "👤 Database User:     postgres"
echo "🔑 Database Password: $POSTGRES_PASSWORD"
echo ""
echo "📝 Connection details saved to connection_info.txt"
echo ""

# Save connection info
cat > ~/vocabulary-migration/connection_info.txt << EOF
Supabase Connection Information
===============================

Supabase Studio: http://localhost:3000
API URL: http://localhost:8000
PostgreSQL Host: localhost
PostgreSQL Port: 5432
Database: postgres
Username: postgres
Password: $POSTGRES_PASSWORD

JWT Secret: $JWT_SECRET
Anon Key: $ANON_KEY
Service Role Key: $SERVICE_ROLE_KEY

Dashboard Login:
Username: supabase  
Password: this_password_is_insecure_and_should_be_updated

Generated on: $(date)
EOF

echo "🔧 To stop services: docker compose down"
echo "🔧 To restart services: docker compose up -d"
echo "🔧 To view logs: docker compose logs -f"
echo ""
echo "Ready for database migration!"
echo "=========================================="